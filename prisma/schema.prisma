// https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    refresh_token_expires_in Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                       String                    @id @default(cuid())
    name                     String?
    displayName              String?
    email                    String?                   @unique
    emailVerified            DateTime?
    image                    String?
    computingId              String?                   @unique
    password                 String?
    accounts                 Account[]
    sessions                 Session[]
    computingIdVerifications ComputingIdVerification[]
    ownedClasses             Class[]
    classes                  Class[]                   @relation("ClassStudents")
    hostedClassSessions      ClassSession[]
    classSessions            ClassSession[]            @relation("ClassSessionStudents")
}

model ComputingIdVerification {
    id          String   @id @default(cuid())
    expires     DateTime
    computingId String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
}

model Class {
    id            String         @id @default(cuid())
    courseCode    String
    title         String
    code          String         @unique
    ownerUser     User           @relation(fields: [ownerUserId], references: [id], onDelete: Cascade)
    ownerUserId   String
    students      User[]         @relation("ClassStudents")
    classSessions ClassSession[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ClassSession {
    id         String   @id @default(cuid())
    createdAt  DateTime
    hostUser   User     @relation(fields: [hostUserId], references: [id], onDelete: Cascade)
    hostUserId String
    class      Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
    classId    String
    students   User[]   @relation("ClassSessionStudents")
}
